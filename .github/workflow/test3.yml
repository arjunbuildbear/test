name: BBApp

on:
  workflow_dispatch:
    inputs:
      projectId:
        description: 'Project ID'
        required: true

jobs:
  check_project_status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Project
        id: project_status
        run: |
          # Fetch project status using the provided projectId
          PROJECT_ID="${{ github.event.inputs.projectId }}"
          PROJECT_STATUS=$(curl -s "https://backend.sigma.buildbear.io/app/project?projectId=$PROJECT_ID")

          # Extract the testId from the project response
          TEST_ID=$(echo "$PROJECT_STATUS" | jq -r '.testId')

          # Print project status
          echo "Project Status: $PROJECT_STATUS"
          echo "Test ID: $TEST_ID"

          # Store the testId as an output variable
          echo "::set-output name=testId::$TEST_ID"
        shell: bash

      - name: Get Test Status
        id: test_status
        run: |
          # Fetch test status using the testId from the previous step
          TEST_ID="${{ steps.project_status.outputs.testId }}"
          TEST_STATUS=$(curl -s "https://backend.sigma.buildbear.io/app/test/$TEST_ID")

          Status=$(echo "$TEST_STATUS" | jq -r ".status")

          # Print test status
          echo "Test Status: $TEST_STATUS"
        shell: bash

      - name: Test Status
        id: wait_for_test_status
        run: |
          DASHBOARD_URL="https://app.sigma.buildbear.io/"
          while true; do
            TEST_ID="${{ steps.project_status.outputs.testId }}"
            TEST_STATUS=$(curl -s "https://backend.sigma.buildbear.io/app/test/$TEST_ID" | jq -r '.status')

            if [ "$TEST_STATUS" == "success" ]; then
              echo "The test has succeeded. Visit your dashboard at $DASHBOARD_URL"
              exit 0  # Success
            elif [ "$TEST_STATUS" == "aborted" ]; then
              echo "The test has been aborted. Visit your dashboard at $DASHBOARD_URL"
              exit 0  # Success
            else
              echo "Waiting for test status. Current status: $TEST_STATUS"
              sleep 60  # Wait for 60 seconds before checking again
            fi
          done
        shell: bash